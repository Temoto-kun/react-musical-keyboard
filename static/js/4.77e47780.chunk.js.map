{"version":3,"sources":["services/getKeyFrequency.js","services/WaveSoundGenerator.js"],"names":["getKeyFrequency","keyNumber","baseKeyNumber","baseKeyFrequency","Math","pow","__webpack_exports__","baseFrequency","arguments","length","undefined","oscillators","audioCtx","window","AudioContext","webkitAudioContext","sounds","split","sound","this","changeSound","soundId","soundOn","id","volume","stop","createOscillator","gainNode","createGain","type","connect","destination","gain","value","frequency","start","soundOff","err","getSounds"],"mappings":"gGAAA,IAOeA,EAPS,SAACC,EAAWC,EAAeC,GAA3B,OACtBA,EAAmBC,KAAKC,IACtBD,KAAKC,IAAI,EAAG,EAAI,IACfJ,EAAYC,ICDFI,EAAA,uBAACC,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiB,IAAjB,OAAyB,WACtC,IAAMG,EAAc,GAEdC,EAAW,IADIC,OAAOC,cAAgBD,OAAOE,oBAE7CC,EAAS,gCAAgCC,MAAM,KAEjDC,EAAQ,EAEZC,KAAKC,YAAc,SAAAC,GACjBH,EAAQG,GAGVF,KAAKG,QAAU,SAACC,EAAIC,GACdb,EAAYY,KACdZ,EAAYY,GAAIE,cACTd,EAAYY,IAGrBZ,EAAYY,GAAMX,EAASc,mBAC3B,IAAMC,EAAWf,EAASgB,aAE1BjB,EAAYY,GAAIM,KAAOb,EAAOE,GAC9BP,EAAYY,GAAIO,QAAQH,GACxBA,EAASG,QAAQlB,EAASmB,aAC1BJ,EAASK,KAAKC,MAAiB,KAATT,EAEtBb,EAAYY,GAAIW,UAAUD,MAAQjC,EAAgBuB,EAAI,GAAIhB,GAC1DI,EAAYY,GAAIY,SAGlBhB,KAAKiB,SAAW,SAAAb,GACd,GAAIZ,EAAYY,GAAK,CACnB,IACEZ,EAAYY,GAAIE,OAChB,MAAOY,WACF1B,EAAYY,KAIvBJ,KAAKmB,UAAY,iBAAM,gCAAgCrB,MAAM","file":"static/js/4.77e47780.chunk.js","sourcesContent":["const getKeyFrequency = (keyNumber, baseKeyNumber, baseKeyFrequency) => (\n  baseKeyFrequency * Math.pow(\n    Math.pow(2, 1 / 12),\n    (keyNumber - baseKeyNumber)\n  )\n)\n\nexport default getKeyFrequency\n","import getKeyFrequency from './getKeyFrequency'\n\nexport default (baseFrequency = 440) => function WaveSoundGenerator() {\n  const oscillators = {}\n  const AudioContext = window.AudioContext || window.webkitAudioContext\n  const audioCtx = new AudioContext()\n  const sounds = 'sine triangle sawtooth square'.split(' ')\n\n  let sound = 0\n\n  this.changeSound = soundId => {\n    sound = soundId\n  }\n\n  this.soundOn = (id, volume) => {\n    if (oscillators[id]) {\n      oscillators[id].stop()\n      delete oscillators[id]\n    }\n\n    oscillators[id] = audioCtx.createOscillator()\n    const gainNode = audioCtx.createGain()\n\n    oscillators[id].type = sounds[sound]\n    oscillators[id].connect(gainNode)\n    gainNode.connect(audioCtx.destination)\n    gainNode.gain.value = volume * 0.001\n\n    oscillators[id].frequency.value = getKeyFrequency(id, 69, baseFrequency)\n    oscillators[id].start()\n  }\n\n  this.soundOff = id => {\n    if (oscillators[id]) {\n      try {\n        oscillators[id].stop()\n      } catch (err) {}\n      delete oscillators[id]\n    }\n  }\n\n  this.getSounds = () => 'sine triangle sawtooth square'.split(' ')\n}\n"],"sourceRoot":""}